<!--this code reads the realtime sensor data and update it in the webpage using the websocket. here esp32 will work as a websocket server and browser acts like websocket client -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP IOT DASHBOARD</title>
    <link rel="icon" type="image/png" href="favicon.png">
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-900 font-sans text-white">

    <div class="bg-[#0A1128] p-4">
        <h1 class="text-2xl font-semibold text-center">SENSOR READINGS (WEBSOCKET)</h1>
    </div>

    <div class="p-12">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">

            <div class="bg-white p-6 rounded-lg shadow-lg text-center">
                <p class="text-xl font-bold text-[#034078] mb-4">
                    <i class="fas fa-thermometer-threequarters text-[#059e8a]"></i> Temperature
                </p>
                <p class="text-2xl text-[#1282A2]">
                    <span id="temperature">--</span> °C
                </p>
            </div>

            <div class="bg-white p-6 rounded-lg shadow-lg text-center">
                <p class="text-xl font-bold text-[#034078] mb-4">Humidity</p>
                <p class="text-2xl text-[#1282A2]">
                    <span id="humidity">--</span> %
                </p>
            </div>

            <div class="bg-white p-6 rounded-lg shadow-lg text-center">
                <p class="text-xl font-bold text-[#034078] mb-4">Pressure</p>
                <p class="text-2xl text-[#1282A2]">
                    <span id="pressure">--</span> hpa
                </p>
            </div>

        </div>
    </div>

    <script>
        var gateway = `ws://${window.location.hostname}/ws`;
        var websocket;

        // Init web socket when the page loads
        window.addEventListener('load', onload);

        function onload(event) {
            initWebSocket();
        }

        function getReadings() {
            websocket.send("getReadings");
        }

        function initWebSocket() {
            console.log('Trying to open a WebSocket connection…');
            websocket = new WebSocket(gateway);
            websocket.onopen = onOpen;
            websocket.onclose = onClose;
            websocket.onmessage = onMessage;
        }

        // When websocket is established, call the getReadings() function
        function onOpen(event) {
            console.log('Connection opened');
            getReadings();
        }

        function onClose(event) {
            console.log('Connection closed');
            setTimeout(initWebSocket, 2000);
        }

        // Function that receives the message from the ESP32 with the readings
        function onMessage(event) {
            console.log(event.data);
            var myObj = JSON.parse(event.data);
            var keys = Object.keys(myObj);

            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                document.getElementById(key).innerHTML = myObj[key];
            }
        }
    </script>

</body>

</html>

// this is my esp32 code works as a websocket server
#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>
#include <Adafruit_BME280.h>
#include <Adafruit_Sensor.h>

// Replace with your network credentials
const char* ssid = "REPLACE_WITH_YOUR_SSID";
const char* password = "REPLACE_WITH_YOUR_PASSWORD";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

JSONVar readings;

unsigned long lastTime = 0;
unsigned long timerDelay = 30000;

Adafruit_BME280 bme;

void initBME(){
  if (!bme.begin(0x76)) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }
}

// Get Sensor Readings and return JSON object
String getSensorReadings(){
  readings["temperature"] = String(bme.readTemperature());
  readings["humidity"] =  String(bme.readHumidity());
  readings["pressure"] = String(bme.readPressure()/100.0F);
  String jsonString = JSON.stringify(readings);
  return jsonString;
}

// Initialize WiFi
void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

void notifyClients(String sensorReadings) {
  ws.textAll(sensorReadings);
}

void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
  AwsFrameInfo *info = (AwsFrameInfo*)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    //data[len] = 0;
    //String message = (char*)data;
    // Check if the message is "getReadings"
    //if (strcmp((char*)data, "getReadings") == 0) {
      //if it is, send current sensor readings
      String sensorReadings = getSensorReadings();
      Serial.print(sensorReadings);
      notifyClients(sensorReadings);
    //}
  }
}

void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}

void setup() 
{
  Serial.begin(115200);
  initBME();
  initWiFi();
  initWebSocket();
  server.begin();
}

void loop() {
  if ((millis() - lastTime) > timerDelay) {
    String sensorReadings = getSensorReadings();
    Serial.print(sensorReadings);
    notifyClients(sensorReadings);
    lastTime = millis();
  }
  ws.cleanupClients();
}
