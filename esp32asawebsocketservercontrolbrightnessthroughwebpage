<!--this code controls the brightness of three led through the webpage using the websocket. here esp32 will work as a websocket server and browser acts like websocket client -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ESP IOT DASHBOARD</title>
  <link rel="icon" href="favicon.png" type="image/png" />
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-center font-sans">

  <!-- Navbar -->
  <div class="bg-blue-900 p-4 text-white shadow-md">
    <h1 class="text-2xl font-bold">Multiple Sliders</h1>
  </div>

  <!-- Main content -->
  <div class="p-6">
    <div class="grid gap-6 max-w-4xl mx-auto grid-cols-1 md:grid-cols-2 lg:grid-cols-3">

      <!-- Slider Card 1 -->
      <div class="bg-white rounded-2xl shadow-lg p-6">
        <p class="text-xl font-semibold text-blue-800 mb-2">Fader 1</p>
        <div class="px-4">
          <input type="range" onchange="updateSliderPWM(this)" id="slider1" min="0" max="100" step="1" value="0"
            class="w-full h-3 bg-yellow-300 rounded-lg appearance-none cursor-pointer accent-blue-800" />
        </div>
        <p class="mt-4 text-blue-600">Brightness: <span id="sliderValue1">0</span> &percnt;</p>
      </div>

      <!-- Slider Card 2 -->
      <div class="bg-white rounded-2xl shadow-lg p-6">
        <p class="text-xl font-semibold text-blue-800 mb-2">Fader 2</p>
        <div class="px-4">
          <input type="range" onchange="updateSliderPWM(this)" id="slider2" min="0" max="100" step="1" value="0"
            class="w-full h-3 bg-yellow-300 rounded-lg appearance-none cursor-pointer accent-blue-800" />
        </div>
        <p class="mt-4 text-blue-600">Brightness: <span id="sliderValue2">0</span> &percnt;</p>
      </div>

      <!-- Slider Card 3 -->
      <div class="bg-white rounded-2xl shadow-lg p-6">
        <p class="text-xl font-semibold text-blue-800 mb-2">Fader 3</p>
        <div class="px-4">
          <input type="range" onchange="updateSliderPWM(this)" id="slider3" min="0" max="100" step="1" value="0"
            class="w-full h-3 bg-yellow-300 rounded-lg appearance-none cursor-pointer accent-blue-800" />
        </div>
        <p class="mt-4 text-blue-600">Brightness: <span id="sliderValue3">0</span> &percnt;</p>
      </div>

    </div>
  </div>

  <!-- JavaScript Section -->
  <script>
    var gateway = `ws://${window.location.hostname}/ws`;
    var websocket;

    window.addEventListener('load', onload);

    function onload() {
      initWebSocket();
    }

    function getValues() {
      websocket.send("getValues");
    }

    function initWebSocket() {
      console.log('Trying to open a WebSocket connectionâ€¦');
      websocket = new WebSocket(gateway);
      websocket.onopen = onOpen;
      websocket.onclose = onClose;
      websocket.onmessage = onMessage;
    }

    function onOpen(event) {
      console.log('Connection opened');
      getValues();
    }

    function onClose(event) {
      console.log('Connection closed');
      setTimeout(initWebSocket, 2000);
    }

    function updateSliderPWM(element) {
      var sliderNumber = element.id.charAt(element.id.length - 1);
      var sliderValue = element.value;
      document.getElementById("sliderValue" + sliderNumber).textContent = sliderValue;
      console.log("Sending:", sliderNumber + "s" + sliderValue);
      websocket.send(sliderNumber + "s" + sliderValue.toString());
    }

    function onMessage(event) {
      console.log("Received:", event.data);
      var myObj = JSON.parse(event.data);
      var keys = Object.keys(myObj);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        document.getElementById(key).textContent = myObj[key];
        document.getElementById("slider" + (i + 1).toString()).value = myObj[key];
      }
    }
  </script>

</body>
</html>

// esp32 code for controlling the brightness of led
/* 
  Rui Santos & Sara Santos - Random Nerd Tutorials
  Complete project details at https://RandomNerdTutorials.com/esp32-web-server-websocket-sliders/
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files.
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/
#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>

// Replace with your network credentials
const char* ssid = "REPLACE_WITH_YOUR_SSID";
const char* password = "REPLACE_WITH_YOUR_SSID";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");
// Set LED GPIO
const int ledPin1 = 12;
const int ledPin2 = 13;
const int ledPin3 = 14;

String message = "";
String sliderValue1 = "0";
String sliderValue2 = "0";
String sliderValue3 = "0";

int dutyCycle1;
int dutyCycle2;
int dutyCycle3;

// setting PWM properties
const int freq = 5000;
const int ledChannel1 = 0;
const int ledChannel2 = 1;
const int ledChannel3 = 2;

const int resolution = 8;
JSONVar sliderValues;

String getSliderValues(){
  sliderValues["sliderValue1"] = String(sliderValue1);
  sliderValues["sliderValue2"] = String(sliderValue2);
  sliderValues["sliderValue3"] = String(sliderValue3);

  String jsonString = JSON.stringify(sliderValues);
  return jsonString;
}

// Initialize WiFi
void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

void notifyClients(String sliderValues) {
  ws.textAll(sliderValues);
}

void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
  AwsFrameInfo *info = (AwsFrameInfo*)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    data[len] = 0;
    message = (char*)data;
    if (message.indexOf("1s") >= 0) {
      sliderValue1 = message.substring(2);
      dutyCycle1 = map(sliderValue1.toInt(), 0, 100, 0, 255);
      Serial.println(dutyCycle1);
      Serial.print(getSliderValues());
      notifyClients(getSliderValues());
    }
    if (message.indexOf("2s") >= 0) {
      sliderValue2 = message.substring(2);
      dutyCycle2 = map(sliderValue2.toInt(), 0, 100, 0, 255);
      Serial.println(dutyCycle2);
      Serial.print(getSliderValues());
      notifyClients(getSliderValues());
    }    
    if (message.indexOf("3s") >= 0) {
      sliderValue3 = message.substring(2);
      dutyCycle3 = map(sliderValue3.toInt(), 0, 100, 0, 255);
      Serial.println(dutyCycle3);
      Serial.print(getSliderValues());
      notifyClients(getSliderValues());
    }
    if (strcmp((char*)data, "getValues") == 0) {
      notifyClients(getSliderValues());
    }
  }
}
void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);
  initWiFi();

  // Set up LEDC pins
  ledcAttachChannel(ledPin1, freq, resolution, ledChannel1);
  ledcAttachChannel(ledPin2, freq, resolution, ledChannel2);
  ledcAttachChannel(ledPin3, freq, resolution, ledChannel3);

  initWebSocket();
  server.begin();
}

void loop() {
  ledcWrite(ledPin1, dutyCycle1);
  ledcWrite(ledPin2, dutyCycle2);
  ledcWrite(ledPin3, dutyCycle3);

  ws.cleanupClients();
}
